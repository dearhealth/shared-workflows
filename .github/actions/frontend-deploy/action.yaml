name: "run-frontend-ci"
description: "Builds and deploys FE project"

inputs:
  env:
    required: true
  region:
    required: true
  role-to-assume:
    required: true
  aws-account-id:
    required: true
  service-name:
    required: true
  cfn-role:
    required: true
  public:
    required: true
  build-target:
    required: true
  build-output-folder:
    required: true
  code-artifacts-account-id:
    required: true
  datadog-api-key:
    required: false
  service:
    required: false
  minified-path-prefix:
    required: false
  datadog-site:
    required: false
  node-version:
    required: false
  
  
runs:
  using: "composite"
  steps:
  - name: checkout
    uses: actions/checkout@v4
  - name: get-npm-version
    id: package-version
    uses: martinbeentjes/npm-get-version-action@v1.3.1
    with:
      path: .
  - uses: actions/setup-node@v4
    with:
      node-version: ${{ inputs.node-version || 16 }}
      cache: 'npm'
  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      role-to-assume: ${{inputs.role-to-assume}}
      aws-region: ${{inputs.region}}
  - run: aws codeartifact login --region us-east-1 --tool npm --domain dh-artifacts --domain-owner ${{inputs.code-artifacts-account-id}} --repository npm-store
    shell: bash
  - name: yarn setup
    shell: bash
    run: echo "always-auth=true" >> ~/.npmrc 
  - shell: bash
    run: yarn install
  - run: npm run build:${{ inputs.build-target }}
    shell: bash
  - run: echo "WEB_BUCKET_NAME=dh-${{ inputs.env }}-${{ inputs.service-name }}-${{ inputs.aws-account-id }}-${{ inputs.region }}" >> $GITHUB_ENV
    shell: bash
  - run: echo "STACK_NAME=dh-${{ inputs.env }}-${{ inputs.service-name }}" >> $GITHUB_ENV
    shell: bash
  - run: echo "S3_BUCKET_NAME=$(aws cloudformation list-exports --region ${{ inputs.region }} --query "Exports[?Name=='dh-${{ inputs.env }}-${{ inputs.service-name }}-s3-bucket-name'].Value" --no-paginate --output text)" >> $GITHUB_ENV
    shell: bash
  - run: echo DISTRIBUTION_ID=$(aws cloudformation list-exports --region ${{ inputs.region }} --query "Exports[?Name=='dh-${{ inputs.env }}-${{ inputs.service-name }}-distribution-id'].Value" --no-paginate --output text) >> $GITHUB_ENV
    shell: bash
  - run: aws cloudformation deploy --template-file cloudformation/template.yml --stack-name ${{ env.STACK_NAME }} --region ${{ inputs.region }} --capabilities CAPABILITY_NAMED_IAM --role-arn ${{ inputs.cfn-role }} --parameter-overrides EnvId=${{ inputs.env }} Public=${{ inputs.public }} WebBucketName=${{ env.WEB_BUCKET_NAME }}
    shell: bash
  - name: Upload to S3
    shell: bash
    run: |
      # Upload site
      export site_exclusions_inclusions="--exclude \"*.ttf\" --exclude \"*.eot\" --exclude \"*.woff*\" --exclude \"*.svg\" --exclude \"*.js\" --exclude \"*.js.map\" --exclude \"assets*\""
      aws s3 sync ${{ inputs.build-output-folder }} "s3://${{ env.S3_BUCKET_NAME }}" $site_exclusions_inclusions

      # Upload statics
      export statics_exclusions_inclusions="--exclude \"*\" --include \"*.ttf\" --include \"*.eot\" --include \"*.woff*\" --include \"*.svg\" --include \"*.js\" --include \"assets*\" --cache-control max-age=86400"
      aws s3 sync ${{ inputs.build-output-folder }} "s3://${{ env.S3_BUCKET_NAME }}" $statics_exclusions_inclusions

      # Invalidate cloudfront cache
      aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"

      ## Delete old site contents from the bucket
      aws s3 sync ${{ inputs.build-output-folder }} "s3://${{ env.S3_BUCKET_NAME }}" $site_exclusions_inclusions --delete
      
      ## Delete old statics contents from the bucket
      aws s3 sync ${{ inputs.build-output-folder }} "s3://${{ env.S3_BUCKET_NAME }}" $statics_exclusions_inclusions --delete
  - run: aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"
    shell: bash    
  - name: Upload Sourcemaps
    shell: bash
    env:
      DATADOG_API_KEY: ${{ inputs.datadog-api-key }}
      DATADOG_SITE: ${{ inputs.datadog-site }}
    run: |
      if [ ! -z "${{ inputs.datadog-api-key }}" ]; then
        npx datadog-ci sourcemaps upload ${{ inputs.build-output-folder }} \
          --service=${{ inputs.service }} \
          --release-version=${{ steps.package-version.outputs.current-version }} \
          --minified-path-prefix=${{ inputs.minified-path-prefix }}
      else
        echo "No Datadog API key provided, skipping sourcemaps upload"
      fi
      
        

  
