name: "run-contentful-to-gatsby-deployment"
description: "Extracts content from Contentful and creates a gatsby Website out of it."

inputs:
  env:
    required: true
  region:
    required: true
  role-to-assume:
    required: true
  aws-account-id:
    required: true
  env-name:
    required: true
  portal-name:
    required: true
  cfn-role:
    required: true
  contentful-space-id:
    required: true
  contentful-access-token:
    required: true
  bucket-name:
    required: true
  distribution-id-export-name:
    required: true

runs:
  using: "composite"
  steps:
  - name: checkout
    uses: actions/checkout@v3
  - uses: actions/setup-node@v3
    with:
      node-version: '18'    
      cache: 'npm'
  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      role-to-assume: ${{inputs.role-to-assume}}
      aws-region: ${{inputs.region}}

  - shell: bash
    run: |
      echo "Setting env vars for Cloudormation DATA Stack deployment"
      
      echo "ENVIRONMENT=${{inputs.env-name}}" >> $GITHUB_ENV
      echo "STACK_NAME=${{inputs.portal-name}}-${{inputs.env-name}}-data-stack" >> $GITHUB_ENV
      
  - shell: bash
    run: |
      echo "Starting Cloudormation DATA Stack deployment..."
      aws cloudformation deploy --template-file cf_templates/data.yml --region ${{ inputs.region }} --stack-name ${{ env.STACK_NAME }} --capabilities CAPABILITY_NAMED_IAM --role-arn ${{ inputs.cfn-role }} --parameter-overrides BucketName=${{ inputs.bucket-name }} EnvType=${{inputs.env-name}}

  - uses: dearhealth/shared-workflows/.github/actions/npm-add-codeartifact@main
    with:
      role-to-assume: ${{ secrets.DEPLOYMENT_ROLE_DEV }}
      code-artifact-domain: dh-artifacts
      code-artifact-account: ${{ secrets.AWS_ACCOUNT_DEV }}

  - name: Build & Upload to S3
    shell: bash
    run: |
      CONTENTFUL_SPACE_ID=${{ inputs.contentful-space-id }} \
      CONTENTFUL_ACCESS_TOKEN=${{ inputs.contentful-access-token }} \

      echo "Starting GATSBY build....."
      npm config set legacy-peer-deps true
      npm install
      
      npm run s3-clean-build-upload
      echo "S3 bucket sync complete..."
      echo "--------------------- Deployment completed successfully in region ${{ inputs.region }} ---------------------------"

  - name: Invalidating cloudfront edge cache
    shell: bash
    run: |
      echo DISTRIBUTION_ID=$(aws cloudformation list-exports --region ${{ inputs.region }} --query "Exports[?Name=='${{ inputs.distribution-id-export-name }}'].Value" --no-paginate --output text) >> $GITHUB_ENV
      
      echo "Creating invalidation for distribution id => $DISTRIBUTION_ID"

      aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"

